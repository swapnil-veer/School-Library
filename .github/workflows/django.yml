name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8,]

    steps:
      # Step 1: Set up Node.js (if required for frontend tasks or any Node dependencies)
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 2: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 3: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement.txt

      # Step 5: Run Pylint (Linting)
      - name: Install and Run Pylint
        run: |
          pip install pylint
          pylint school_library/ --exit-zero

      # Step 6: SonarQube Scan (Static Code Analysis)
      # - name: SonarQube Scan
      #   uses: SonarSource/sonarcloud-github-action@v1.6
      #   with:
      #     sonar_token: ${{ secrets.SONAR_TOKEN }}
      #     projectKey: School-Library
      #     organization: swapnil-veer
      #     scannerMode: CLI
          
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
              -Dsonar.organization=swapnil-veer
              -Dsonar.projectKey=School-Library
              -Dsonar.sources=.
          # -Dsonar.python.coverage.reportPaths=coverage.xml
      # Step 7: Run Unit Tests
      - name: Run Tests
        run: |
          python manage.py test
